{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww31940\viewh17380\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs36 \cf0 TEST : \
\
- Do not test with more than 200 philosphers\
- Do not test with time_to_die or time_to_eat or time_to_sleep under 60 ms\
./philo_one 5 800 200 200 -> pas de mort\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 ./philo_one 5 800 200 200 7 -> pas de mort et fin apr\'e8s 7 repas\
./philo_one 4 410 200 200 -> pas de mort \
./philo_one 4 310 200 100 -> doit mourrir\
- Test avec 2 philosophe et regarder la mort (pas plus de 10 ms)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs24 \cf0 \
\
\
PHILO-ONE :\
- Check the code of philo_one for the following things and ask for explanation.\
- Check if there is one thread per philosopher.\
- Check if there is a mutex per fork and that it's used to check the fork value and/or change it.\
- Check if the output is protected against multiple access. To avoid a scrambled view.\
- Check how the death of a philosopher is checked and if there is a mutex to protect that a philosopher dies and start eating at the same time.\
- Do not test with more than 200 philosphers\
- Do not test with time_to_die or time_to_eat or time_to_sleep under 60 ms\
- Test with 5 800 200 200, no one should die!\
- Test with 5 800 200 200 7, no one should die and the simulation should stop when all the philosopher has eaten at least 7 times each.\
- Test with 4 410 200 200, no one should die!\
- Test with 4 310 200 100, a philosopher should die!\
- Test with 2 philosophers and check the different times (a death delayed by more than 10 ms is unacceptable).\
- Test your own values to check all the rules. Check if a philosopher dies at the right time, if they don't steal forks, etc.\
PHILO-TWO :\
- Check the code of philo_two for the following things and ask for explanation.\
- Check if there is one thread per philosopher.\
- Check if there is a single semaphore that represents the number of forks.\
- Check if the output is protected against multiple access. To avoid a scrambled view.\
- Check how the death of a philosopher is checked and if there is a semaphore to protect that a philosopher dies and start eating at the same time.\
- Do not test with more than 200 philosphers\
- Do not test with time_to_die or time_to_eat or time_to_sleep under 60 ms \
- Test with 5 800 200 200, no one should die!\
- Test with 5 800 200 200 7, no one should die and the simulation should stop when all the philosopher has eaten at least 7 times each.\
- Test with 4 410 200 200, no one should die!\
- Test with 4 310 200 100, a philosopher should die!\
- Test with 2 philosophers and check the different times (a death delayed by more than 10 ms is unacceptable).\
- Test your own values to check all the rules. Check if a philosopher dies at the right time, if they don't steal forks, etc.\
PHILO-THREE :\
- Check the code of philo_three for the following things and ask for explanation.\
- Check if there will be one process per philosopher and that the first process waits for all of them.\
- Check if there is a single semaphore that represent the number of forks.\
- Check if the output is protected against multiple access. To avoid a scrambled view.\
- Check how the death of a philosopher is checked and if there is a semaphore to protect that a philosopher dies and start eating at the same time.\
- Do not test with more than 200 philosphers\
- Do not test with time_to_die or time_to_eat or time_to_sleep under 60 ms\
- Test with 5 800 200 200, no one should die!\
- Test with 5 800 200 200 7, no one should die and the simulation should stop when all the philosopher has eaten at least 7 times each.\
- Test with 4 410 200 200, no one should die!\
- Test with 4 310 200 100, a philosopher should die!\
- Test with 2 philosophers and check the different times (a death delayed by more than 10 ms is unacceptable).\
- Test your own values to check all the rules. Check if a philosopher dies at the right time, if they don't steal forks, etc.}